const SistemaFirmaDigital = require('./modules/sistemaFirmaDigital');

async function probarConEmpresaCorrecta() {
    console.log('üß™ Probando con empresa que tenga CIF coincidente...');
    
    const sistemaFirma = new SistemaFirmaDigital();
    
    try {
        // Crear una empresa temporal con el CIF del certificado
        const empresaTest = {
            id: 999,
            nombre: 'MARZO\'S MOTOR SL',
            cif: 'VATES-B35707512',
            direccion: 'Direcci√≥n de prueba',
            telefono: '123456789',
            email: 'test@marzos.com'
        };
        
        console.log('üè¢ Empresa de prueba:', empresaTest.nombre);
        console.log('üîë CIF:', empresaTest.cif);
        
        // Probar detecci√≥n espec√≠fica para esta empresa
        console.log('\nüîç Detectando firmas para empresa con CIF coincidente...');
        const resultadoEmpresa = await sistemaFirma.obtenerFirmasParaAsignar(empresaTest.id);
        
        if (resultadoEmpresa.success) {
            console.log(`‚úÖ Firmas disponibles: ${resultadoEmpresa.total}`);
            
            console.log('\nüìã Firmas con an√°lisis de compatibilidad:');
            resultadoEmpresa.firmas.forEach((firma, index) => {
                console.log(`\n${index + 1}. ${firma.descripcion}`);
                console.log(`   - Compatible: ${firma.compatible.compatible ? 'S√≠' : 'No'}`);
                console.log(`   - Motivo: ${firma.compatible.motivo}`);
                console.log(`   - Nivel: ${firma.compatible.nivel}`);
                console.log(`   - Recomendada: ${firma.recomendada ? 'S√≠' : 'No'}`);
            });
            
            // Probar asociaci√≥n de firma recomendada
            const firmaRecomendada = resultadoEmpresa.firmas.find(f => f.recomendada);
            
            if (firmaRecomendada) {
                console.log(`\n‚úÖ Firma recomendada encontrada: ${firmaRecomendada.descripcion}`);
                
                // Simular asociaci√≥n (sin hacerla realmente)
                console.log('üîó Simulando asociaci√≥n de firma recomendada...');
                console.log('   - Thumbprint:', firmaRecomendada.thumbprint);
                console.log('   - Empresa:', firmaRecomendada.empresa);
                console.log('   - CIF:', firmaRecomendada.cif);
                console.log('   - V√°lido:', firmaRecomendada.isValido ? 'S√≠' : 'No');
                
            } else {
                console.log('\n‚ö†Ô∏è No se encontr√≥ firma recomendada');
                
                // Mostrar la mejor opci√≥n disponible
                const mejorOpcion = resultadoEmpresa.firmas.find(f => f.compatible.compatible);
                if (mejorOpcion) {
                    console.log('üí° Mejor opci√≥n disponible:');
                    console.log('   - Descripci√≥n:', mejorOpcion.descripcion);
                    console.log('   - Compatible:', mejorOpcion.compatible.compatible ? 'S√≠' : 'No');
                    console.log('   - Motivo:', mejorOpcion.compatible.motivo);
                    console.log('   - Nivel:', mejorOpcion.compatible.nivel);
                }
            }
            
        } else {
            console.log('‚ùå Error al obtener firmas para empresa:', resultadoEmpresa.error);
        }
        
    } catch (error) {
        console.error('‚ùå Error en prueba:', error);
    }
}

probarConEmpresaCorrecta().catch(console.error);
